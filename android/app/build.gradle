buildscript {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId 'com.recordit'
        targetSdkVersion 26
        minSdkVersion 16
        versionCode 1
        versionName '1.0.0'
        ndk {
            abiFilters 'armeabi-v7a', 'x86'
        }
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // Deprecated. Used by net.openid:appauth
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'host.exp.exponent'
        ]
    }
    dexOptions {
        javaMaxHeapSize System.getenv("DISABLE_DEX_MAX_HEAP") ? null : "8g"
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        pickFirst "**"
    }
    configurations.all {
        resolutionStrategy.force 'com.android.support:design:27.1.0'
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-sound')
    implementation project(':react-native-audio')
    implementation project(':react-native-fs')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-radial-gradient')
    implementation 'com.android.support:multidex:1.0.1'

    // Our dependencies
    implementation 'com.android.support:appcompat-v7:27.1.1'

    compile project(':react-native-vector-icons')
    compile fileTree(dir: "libs", include: ["*.jar"])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    compile "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}



///////////////////////////////////////////////////
//////////////////////////////////////////////////
/
////////////
//dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//
//
//    // Our dependencies from ExpoView
//    // DON'T ADD ANYTHING HERE THAT ISN'T IN EXPOVIEW. ONLY COPY THINGS FROM EXPOVIEW TO HERE.
//    implementation 'com.android.support:appcompat-v7:27.1.1'
//    implementation 'com.facebook.android:facebook-android-sdk:4.34.0'
//    implementation('com.facebook.android:audience-network-sdk:4.99.0') {
//        exclude module: 'play-services-ads'
//    }
//    compileOnly 'org.glassfish:javax.annotation:3.1.1'
//    implementation 'com.jakewharton:butterknife:8.4.0'
//    implementation 'de.greenrobot:eventbus:2.4.0'
//    implementation 'com.amplitude:android-sdk:2.9.2' // Be careful when upgrading! Upgrading might break experience scoping. Check with Jesse. See Analytics.resetAmplitudeDatabaseHelper
//    implementation 'com.squareup.picasso:picasso:2.5.2'
//    implementation 'com.google.android.gms:play-services-gcm:15.0.1'
//    implementation 'com.google.android.gms:play-services-analytics:16.0.1'
//    implementation 'com.google.android.gms:play-services-maps:15.0.1'
//    implementation 'com.google.android.gms:play-services-auth:15.0.1'
//    implementation 'com.google.android.gms:play-services-location:15.0.1'
//    implementation 'com.google.android.gms:play-services-ads:15.0.1'
//    annotationProcessor 'com.raizlabs.android:DBFlow-Compiler:2.2.1'
//    implementation "com.raizlabs.android:DBFlow-Core:2.2.1"
//    implementation "com.raizlabs.android:DBFlow:2.2.1"
//    implementation "com.madgag.spongycastle:core:1.53.0.0"
//    implementation "com.madgag.spongycastle:prov:1.53.0.0"
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta1'
//    // debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.4-beta1'
//    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta1'
//    implementation 'com.facebook.device.yearclass:yearclass:1.0.1'
//    implementation 'commons-io:commons-io:1.3.2'
//    implementation 'me.leolin:ShortcutBadger:1.1.4@aar'
//    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
//    implementation 'com.theartofdev.edmodo:android-image-cropper:2.4.7'
//    implementation 'com.yqritc:android-scalablevideoview:1.0.1'
//    implementation 'commons-codec:commons-codec:1.10'
//    implementation 'com.segment.analytics.android:analytics:4.3.0'
//    implementation 'com.google.zxing:core:3.2.1'
//    implementation 'net.openid:appauth:0.4.1'
//    implementation('com.airbnb.android:lottie:2.5.5')  {
//        exclude group: 'com.android.support', module: 'appcompat-v7'
//    }
//    implementation 'io.branch.sdk.android:library:2.17.1'
//    implementation('io.nlopez.smartlocation:library:3.2.11') {
//        transitive = false
//    }
//    implementation 'com.android.support:exifinterface:27.1.1'
//    implementation 'com.squareup.okhttp3:okhttp:3.4.1'
//    implementation 'com.squareup.okhttp3:okhttp-urlconnection:3.4.1'
//    implementation 'com.squareup.okhttp3:okhttp-ws:3.4.1'
//    implementation 'com.squareup.okio:okio:1.9.0'
//
//    // Testing
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
//    // We use a modified build of com.android.support.test:runner:1.0.1. Explanation in maven-test/README
//    androidTestImplementation 'com.android.support.test:runner:1.0.1'
//    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
//    androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.0'
//    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'
//    androidTestImplementation 'com.azimolabs.conditionwatcher:conditionwatcher:0.2'
//
//    testImplementation 'junit:junit:4.12'
//    testImplementation 'org.mockito:mockito-core:1.10.19'
//    testImplementation 'org.robolectric:robolectric:3.8'
//    testImplementation 'com.android.support.test:runner:1.0.2-alpha1'
//    testImplementation 'com.android.support.test:rules:1.0.2-alpha1'
//
//
//    implementation('host.exp.exponent:expoview:30.0.0@aar') {
//        transitive = true
//        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
//        exclude group: 'com.squareup.okhttp3', module: 'okhttp-urlconnection'
//    }
//
//}

// This has to be down here for some reason
//apply plugin: 'com.google.gms.google-services'
